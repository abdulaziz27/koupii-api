name: Deploy Koupii API Backend

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Generate security report
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
      name: production
      url: https://api-koupii.magercoding.com

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          ssh-keyscan -p ${PORT:-22} ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        env:
          PORT: ${{ secrets.VPS_PORT }}

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        env:
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          REGISTRY_TOKEN: ${{ secrets.REGISTRY_TOKEN }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          timeout: 300s
          command_timeout: 600s
          envs: GITHUB_SHA,GITHUB_REPOSITORY,REGISTRY_USERNAME,REGISTRY_TOKEN
          script: |
            set -euo pipefail

            APP_DIR="/srv/apps/koupii-api"
            sudo mkdir -p "$APP_DIR" && sudo chown -R "$USER:$USER" "$APP_DIR"
            cd "$APP_DIR"

            echo "=== Starting Koupii API Deployment ==="
            echo "Deploying commit: $GITHUB_SHA"
            echo "Repository: $GITHUB_REPOSITORY"
            echo "Timestamp: $(date)"

            # GHCR path wajib lowercase
            IMAGE_NAME_LOWER=$(echo "$GITHUB_REPOSITORY" | tr '[:upper:]' '[:lower:]')
            IMAGE="ghcr.io/$IMAGE_NAME_LOWER:$GITHUB_SHA"
            echo "Using image: $IMAGE"

            # Create external network if not exists
            echo "Ensuring koupii-network exists..."
            docker network create koupii-network || true

            # Login to GitHub Container Registry
            echo "Logging into GitHub Container Registry..."
            echo "$REGISTRY_TOKEN" | docker login ghcr.io -u "$REGISTRY_USERNAME" --password-stdin

            # Create docker-compose.yml with shell variables
            cat > docker-compose.yml <<EOF
            # Production Docker Compose for Koupii API
            services:
              db:
                image: mysql:8.0
                container_name: koupii-api-db
                restart: unless-stopped
                environment:
                  MYSQL_DATABASE: \${DB_DATABASE}
                  MYSQL_USER: \${DB_USERNAME}
                  MYSQL_PASSWORD: \${DB_PASSWORD}
                  MYSQL_ROOT_PASSWORD: \${DB_ROOT_PASSWORD:-rootpass}
                volumes:
                  - ./mysql-data:/var/lib/mysql
                networks: ["koupii-network"]
                healthcheck:
                  test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-uroot", "-p\${DB_ROOT_PASSWORD:-rootpass}"]
                  interval: 10s
                  timeout: 5s
                  retries: 10
                  start_period: 30s

              redis:
                image: redis:7-alpine
                container_name: koupii-api-redis
                restart: unless-stopped
                command: redis-server --appendonly yes
                volumes:
                  - ./redis-data:/data
                networks: ["koupii-network"]
                healthcheck:
                  test: ["CMD", "redis-cli", "ping"]
                  interval: 10s
                  timeout: 5s
                  retries: 5
                  start_period: 10s

              app:
                image: $IMAGE
                container_name: koupii-api-app
                restart: unless-stopped
                ports:
                  - "127.0.0.1:8081:80"
                env_file:
                  - ./.env
                environment:
                  - CONTAINER_ROLE=app
                  - FRANKENPHP_WORKERS=4
                  - DB_HOST=db
                  - REDIS_HOST=redis
                  - RUN_MIGRATIONS=false
                  - CLEAR_CACHE=true
                volumes:
                  - ./storage:/app/storage
                  - ./bootstrap-cache:/app/bootstrap/cache
                depends_on:
                  db:
                    condition: service_healthy
                  redis:
                    condition: service_healthy
                healthcheck:
                  test: ["CMD-SHELL", "curl -fsS http://localhost:80/health >/dev/null 2>&1 || exit 1"]
                  interval: 30s
                  timeout: 10s
                  retries: 8
                  start_period: 150s
                networks: ["koupii-network"]

              queue:
                image: $IMAGE
                container_name: koupii-api-queue
                restart: unless-stopped
                env_file: [".env"]
                environment:
                  - CONTAINER_ROLE=queue
                  - DB_HOST=db
                  - REDIS_HOST=redis
                command: php artisan queue:work --sleep=3 --tries=3 --max-time=3600
                volumes:
                  - ./storage:/app/storage
                  - ./bootstrap-cache:/app/bootstrap/cache
                depends_on:
                  app:
                    condition: service_healthy
                networks: ["koupii-network"]

              scheduler:
                image: $IMAGE
                container_name: koupii-api-scheduler
                restart: unless-stopped
                env_file: [".env"]
                environment:
                  - CONTAINER_ROLE=scheduler
                  - DB_HOST=db
                  - REDIS_HOST=redis
                command: php artisan schedule:work
                volumes:
                  - ./storage:/app/storage
                  - ./bootstrap-cache:/app/bootstrap/cache
                depends_on:
                  app:
                    condition: service_healthy
                networks: ["koupii-network"]

            networks:
              koupii-network:
                external: true
                name: koupii-network
            EOF

            # Validate docker-compose.yml syntax
            echo "Validating docker-compose.yml syntax..."
            docker compose config

            # Check if .env exists
            [ -f .env ] || { echo "ERROR: $APP_DIR/.env not found"; exit 1; }

            # Create required directories with proper permissions
            echo "Creating required directories..."
            mkdir -p storage/app/public storage/framework/{cache,sessions,views} storage/logs bootstrap-cache
            mkdir -p mysql-data redis-data

            # Fix MySQL volume permissions (mysql:8 runs as uid 999)
            echo "Fixing MySQL volume permissions..."
            sudo chown -R 999:999 mysql-data
            sudo find mysql-data -type d -exec chmod 750 {} \;
            sudo find mysql-data -type f -exec chmod 640 {} \;

                        # Clean MySQL data directory (development environment)
            echo "Cleaning MySQL data directory..."
            sudo rm -rf mysql-data
            sudo mkdir -p mysql-data

            # Fix Laravel storage permissions
            sudo chown -R 1000:1000 storage bootstrap-cache
            sudo chmod -R 775 storage bootstrap-cache

            # Update .env to use containerized database
            echo "Updating .env for containerized services..."
            sed -i 's/DB_HOST=127.0.0.1/DB_HOST=db/' .env
            sed -i 's/REDIS_HOST=127.0.0.1/REDIS_HOST=redis/' .env

            # Add DB_ROOT_PASSWORD if not exists
            if ! grep -q "DB_ROOT_PASSWORD" .env; then
              echo "DB_ROOT_PASSWORD=rootpass" >> .env
            fi

            # Ensure APP_KEY exists
            if ! grep -q "APP_KEY=base64:" .env; then
              echo "WARNING: APP_KEY not found in .env. Adding sample key..."
              echo "APP_KEY=base64:PNDph7zhxU+Nim8RzG4yFhnAvf8/aqK1+dXUMt/qwd0=" >> .env
            fi

            # Pull and deploy
            echo "Pulling Docker images..."
            docker compose pull

            # Start database first and wait for it to be healthy
            echo "Starting database first..."
            docker compose up -d db
            echo "Waiting for database to be healthy..."
            timeout=30
            count=0
            while ! docker compose ps db | grep -q "healthy"; do
                if [ $count -ge $timeout ]; then
                    echo "Database health check timeout after ${timeout}s, continuing anyway..."
                    break
                fi
                echo "Database not ready, waiting 2 seconds... ($count/$timeout)"
                sleep 2
                count=$((count + 1))
            done

            echo "Deploying application..."
            timeout 300 docker compose up -d --remove-orphans || echo "Deployment timeout, checking status..."

            # Debug: Show container status
            echo "=== Container Status ==="
            docker compose ps

            # Health check from host
            echo "Performing health check..."
            for i in {1..30}; do
              if curl -fsS http://127.0.0.1:8081/health >/dev/null 2>&1; then
                echo "✅ Health check passed!"
                break
              fi
              echo "Health check attempt $i/30, retrying in 5s..."
              sleep 5
            done

            # Verify deployment
            echo "=== Deployment Status ==="
            docker compose ps

            # Cleanup old images
            echo "Cleaning up old images..."
            docker image prune -f

            # Keep only last 3 versions
            docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.CreatedAt}}" | \
              grep "ghcr.io/$IMAGE_NAME_LOWER" | \
              tail -n +4 | \
              awk '{print $1":"$2}' | \
              xargs -r docker rmi || true

            echo "🎉 Deployment completed successfully!"
            echo "Application is running at: https://api-koupii.magercoding.com"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "🚀 Application is live at https://api-koupii.magercoding.com"
          else
            echo "❌ Deployment failed!"
            echo "Please check the logs and try again."
          fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository }}:${{ github.sha }}
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif
