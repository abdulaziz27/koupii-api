name: Legacy Deploy (disabled)

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: false # disabled; kept for reference only

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to VPS (disabled)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            echo "This legacy workflow is disabled. Use deploy-backend.yml"
            exit 0
            echo "üöÄ Starting deployment..."

            # Navigate to project directory
            cd /srv/apps/koupii-api/releases/initial

            # Show current commit
            echo "üìç Current commit: $(git rev-parse --short HEAD)"

            # Pull latest changes
            echo "üì• Pulling latest changes..."
            git fetch origin
            git reset --hard origin/main

            # Show new commit
            echo "‚úÖ Updated to commit: $(git rev-parse --short HEAD)"

            # Navigate to docker-compose directory
            cd /srv/apps/koupii-api

            # Update APP_KEY in docker-compose.yml if needed
            echo "üîë Updating APP_KEY in docker-compose.yml..."
            if [ -f .env ]; then
                APP_KEY=$(grep "^APP_KEY=" .env | cut -d "=" -f2)
                if [ ! -z "$APP_KEY" ]; then
                    # Use different delimiter to avoid conflict with / in base64
                    sed -i "s|APP_KEY=.*|APP_KEY=$APP_KEY|" docker-compose.yml
                    echo "‚úÖ APP_KEY updated in docker-compose.yml"
                fi
            fi

            # Restart containers
            echo "üîÑ Restarting containers..."
            docker compose down
            docker compose up -d

            # Wait for MySQL to be ready
            echo "üóÑÔ∏è Waiting for MySQL to be ready..."
            for i in {1..30}; do
              if docker compose exec -T mysql mysqladmin ping -h"mysql" --silent; then
                echo "‚úÖ MySQL is ready after ${i} attempts"
                break
              fi
              echo "‚è≥ MySQL not ready yet, waiting... (attempt $i/30)"
              sleep 2
            done

            # Check and create database if needed
            echo "üóÑÔ∏è Ensuring database exists..."
            docker compose exec -T mysql mysql -uroot -proot -e "CREATE DATABASE IF NOT EXISTS koupii_api;" || echo "‚ö†Ô∏è Database creation failed"

            # Wait for backend to be ready
            echo "‚è≥ Waiting for backend container to be ready..."
            for i in {1..30}; do
              if docker compose exec -T backend php artisan --version >/dev/null 2>&1; then
                echo "‚úÖ Backend is ready after ${i} attempts"
                break
              fi
              echo "‚è≥ Backend not ready yet, waiting... (attempt $i/30)"
              sleep 3
            done

            # Run migrations
            echo "üîÑ Running database migrations..."
            docker compose exec -T backend php artisan migrate --force || echo "‚ö†Ô∏è Migration failed"

            # Setup storage symlink (FIXED PATH)
            echo "üîó Setting up storage symlink..."
            docker compose exec -T backend sh -c "
              mkdir -p /var/www/html/storage/app/public &&
              rm -f /var/www/html/public/storage &&
              ln -s /var/www/html/storage/app/public /var/www/html/public/storage &&
              echo 'Storage symlink: /var/www/html/public/storage -> /var/www/html/storage/app/public'
            " || echo "‚ö†Ô∏è Storage symlink setup failed"

            # Clear and cache Laravel config
            echo "üßπ Clearing and caching Laravel config..."
            docker compose exec -T backend sh -c "
              php artisan config:clear &&
              php artisan route:clear &&
              php artisan cache:clear &&
              php artisan config:cache &&
              php artisan route:cache
            " || echo "‚ö†Ô∏è Cache clearing failed"

            # Test API endpoint
            echo "üß™ Testing API endpoint..."
            HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" https://api-koupii.magercoding.com/api/version)

            if [ "$HEALTH_CHECK" = "200" ]; then
              echo "‚úÖ Deployment successful! API is responding."
            else
              echo "‚ùå Deployment warning: API health check returned $HEALTH_CHECK"
            fi

            echo "üéâ Deployment completed!"

      - name: Notify Deployment Status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment to VPS completed successfully!"
          else
            echo "‚ùå Deployment to VPS failed!"
          fi
