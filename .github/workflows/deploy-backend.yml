name: Deploy Koupii API Backend

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Generate security report
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
      name: production
      url: https://api-koupii.magercoding.com

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        env:
          GITHUB_SHA: ${{ github.sha }}
          REGISTRY_USERNAME: ${{ github.actor }}
          REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          timeout: 300s
          command_timeout: 600s
          envs: GITHUB_SHA,REGISTRY_USERNAME,REGISTRY_TOKEN
          script: |
            set -e

            # Define variables
            APP_DIR="/srv/apps/koupii-api"
            DEPLOY_DIR="$APP_DIR/deploy"

            # Create application directory if it doesn't exist
            sudo mkdir -p $APP_DIR
            sudo mkdir -p $DEPLOY_DIR

            # Set proper ownership
            sudo chown -R $USER:$USER $APP_DIR

            # Navigate to app directory
            cd $APP_DIR

            echo "=== Starting Koupii API Deployment ==="
            echo "Deploying commit: $GITHUB_SHA"
            echo "Timestamp: $(date)"

            # Create docker-compose.yml if it doesn't exist or update it
            cat > docker-compose.yml << 'EOF'
            # Production Docker Compose for Koupii API
            services:
              app:
                image: ghcr.io/${{ github.repository }}:${GITHUB_SHA:-latest}
                container_name: koupii-api-app
                restart: unless-stopped
                ports:
                  - "127.0.0.1:8081:8080"
                env_file:
                  - ./.env
                environment:
                  - CONTAINER_ROLE=app
                  - FRANKENPHP_WORKERS=4
                volumes:
                  - ./storage:/app/storage
                  - ./bootstrap-cache:/app/bootstrap/cache
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 60s
                networks:
                  - koupii-network

              queue:
                image: ghcr.io/${{ github.repository }}:${GITHUB_SHA:-latest}
                container_name: koupii-api-queue
                restart: unless-stopped
                env_file:
                  - ./.env
                environment:
                  - CONTAINER_ROLE=queue
                command: php artisan queue:work --sleep=3 --tries=3 --max-time=3600
                volumes:
                  - ./storage:/app/storage
                  - ./bootstrap-cache:/app/bootstrap/cache
                depends_on:
                  app:
                    condition: service_healthy
                networks:
                  - koupii-network

              scheduler:
                image: ghcr.io/${{ github.repository }}:${GITHUB_SHA:-latest}
                container_name: koupii-api-scheduler
                restart: unless-stopped
                env_file:
                  - ./.env
                environment:
                  - CONTAINER_ROLE=scheduler
                command: php artisan schedule:work
                volumes:
                  - ./storage:/app/storage
                  - ./bootstrap-cache:/app/bootstrap/cache
                depends_on:
                  app:
                    condition: service_healthy
                networks:
                  - koupii-network

            networks:
              koupii-network:
                driver: bridge
                name: koupii-network
            EOF

            # Check if .env exists
            if [ ! -f .env ]; then
              echo "ERROR: .env file not found at $APP_DIR/.env"
              echo "Please create the .env file with production configuration"
              echo "You can use the env.sample as a template"
              exit 1
            fi

            # Export environment variables for docker-compose
            export GITHUB_SHA=$GITHUB_SHA

            # Login to GitHub Container Registry
            echo "Logging into GitHub Container Registry..."
            echo "$REGISTRY_TOKEN" | docker login ghcr.io -u "$REGISTRY_USERNAME" --password-stdin

            # Create required directories with proper permissions
            echo "Creating required directories..."
            mkdir -p storage/app/public
            mkdir -p storage/framework/{cache,sessions,views}
            mkdir -p storage/logs
            mkdir -p bootstrap-cache

            # Set proper permissions (1000:1000 is the www user in the container)
            sudo chown -R 1000:1000 storage bootstrap-cache
            sudo chmod -R 775 storage bootstrap-cache

            # Pull the latest images
            echo "Pulling Docker images..."
            docker compose pull

            # Deploy the application
            echo "Deploying application..."
            docker compose up -d --remove-orphans

            # Wait for application to be ready
            echo "Waiting for application to be ready..."
            sleep 30

            # Health check
            echo "Performing health check..."
            max_retries=30
            retry_count=0

            while [ $retry_count -lt $max_retries ]; do
              if curl -fsS http://127.0.0.1:8081/api/health > /dev/null 2>&1; then
                echo "‚úÖ Health check passed!"
                break
              fi

              retry_count=$((retry_count + 1))
              echo "Health check failed (attempt $retry_count/$max_retries), retrying in 10s..."
              sleep 10
            done

            if [ $retry_count -eq $max_retries ]; then
              echo "‚ùå Health check failed after $max_retries attempts"
              echo "Deployment failed!"

              # Show container logs for debugging
              echo "=== Container Logs ==="
              docker compose logs --tail=50
              exit 1
            fi

            # Show deployment status
            echo "=== Deployment Status ==="
            docker compose ps

            # Cleanup old images
            echo "Cleaning up old images..."
            docker image prune -f

            # Keep only last 3 versions
            docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.CreatedAt}}" | \
              grep "ghcr.io/${{ github.repository }}" | \
              tail -n +4 | \
              awk '{print $1":"$2}' | \
              xargs -r docker rmi || true

            echo "üéâ Deployment completed successfully!"
            echo "Application is running at: https://api-koupii.magercoding.com"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
            echo "üöÄ Application is live at https://api-koupii.magercoding.com"
          else
            echo "‚ùå Deployment failed!"
            echo "Please check the logs and try again."
          fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
